.data
name: .space 100   # Variable to store the input name
prompt: .asciiz "Enter a variable name: "
invalidMsg: .asciiz "False"
validMsg: .asciiz "True"
.text
.globl main
main:
    # Display prompt
    li $v0, 4
    la $a0, prompt
    syscall

    # Read the input name
    li $v0, 8
    la $a0, name
    li $a1, 100
    syscall

    # Check if the name is valid
    la $t0, name    # Load the address of the name
    lb $t1, ($t0)   # Load the first character

    # Check if the name starts with a lowercase letter
    blt $t1, 0x41, invalid   # Check if the character is less than 'A'
    bgt $t1, 0x5A, lowercase_check   # Check if the character is greater than 'z'

lowercase_check:
    # Check if the character is a digit, lowercase letter, or underscore    
    blt $t1, 0x61, invalid   # Check if the character is less than 'a'
    bgt $t1, 0x7B, invalid   # Check if the character is greater than 'z'

loop:
    addiu $t0, $t0, 1   # Increment the address
    lb $t1, ($t0)   # Load the next character
    beqz $t1, valid     # Check if the character is null

    case1:
    	blt $t1, 0x41, invalid  # Check if the character is less than '0'
    case2:
   	bgt $t1, 0x5A, case3   # Check if the character is greater than '9'
    case3:	
    	blt $t1, 0x41, case4  # Check if the character is less than 'A'
    case4:
    	bgt $t1, 0x5A, case5  # Check if the character is greater than 'Z'
    case5:
    	blt $t1, 0x61, case6 #Check if the character is less than 'a'
    case6:
    	bne $t1, 0x5F,case7 #check if the character is '_'
    case7:
    	bgt $t1, 0x7B, invalid   # Check if the character is greater than 'z'
    #j loop
valid:
    # Display valid message
    li $v0, 4
    la $a0, validMsg
    syscall
    j exit

invalid:
    # Display invalid message
    li $v0, 4
    la $a0, invalidMsg
    syscall

exit:
    # Exit program
    li $v0, 10
    syscall
